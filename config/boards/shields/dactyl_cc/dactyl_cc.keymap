/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <150>;
    quick_tap_ms = <300>;
    flavor = "hold-preferred";
};

&kscan0 {
    debounce-press-ms = <30>;
    debounce-release-ms = <30>;
};

/ {
  behaviors {
    lhm: left_homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "POSITIONAL_HOLD_TAP_LEFT";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <150>;
      quick_tap_ms = <300>;
      bindings = <&kp>, <&kp>;
      // hold-trigger-key-positions = <5 6 7 8 9>;
    };
    rhm: right_homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "POSITIONAL_HOLD_TAP_RIGHT";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <150>;
      quick_tap_ms = <300>;
      bindings = <&kp>, <&kp>;
      // hold-trigger-key-positions = <0 1 2 3 4>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp Q        &kp W        &kp E        &kp R       &kp T           &kp P          &kp Y       &kp U        &kp I        &kp O
        &lhm LCTRL A &lhm LSHFT S &lhm LMETA D &lhm LALT F &lhm RALT G     &rhm RALT SEMI &rhm LALT H &rhm RMETA J &rhm RSHFT K &rhm RCTRL L
        &kp Z        &kp X        &kp C        &kp V       &kp B           &kp SLASH      &kp N       &kp M        &kp CMMA     &kp DOT
                                  &kp ESC      &lt 2 SPACE &kp TAB         &kp ENTER      &lt 1 BSPC  &none
      >;
    };

    nav_layer {
      bindings = <
        &none     &none           &none            &none     &none               &kp PSCRN      &none          &kp PG_UP       &kp INS       &none
        &kp LCTRL &lhm LSHFT SLCK &lhm LMETA PG_DN &kp LALT  &lhm RALT END       &rhm RALT HOME &rhm LALT LEFT &rhm RMETA DOWN &rhm RSHFT UP &rhm RCTRL RIGHT
        &none     &kp DEL         &kp CLCK         &none     &kp PAUSE_BREAK     &none          &kp LNLCK      &kp K_CMENU     &none         &none
                                  &none            &mo 3     &none               &none          &trans         &none
      >;
    };

    sym_layer {
      bindings = <
        &kp LBRC         &kp RBRC         &kp LPAR         &kp RPAR       &none              &none  &kp N7       &kp N8        &kp N9        &kp RA(W)
        &lhm LCTRL GRAVE &lhm LSHFT MINUS &lhm LMETA EQUAL &lhm LALT APOS &lhm RALT BSLH     &none  &rhm LALT N4 &rhm RMETA N5 &rhm RSHFT N6 &kp RA(L)
        &kp LT           &kp GT           &kp LBKT         &kp RBKT       &none              &none  &kp N1       &kp N2        &kp N3        &kp RA(Z)
                                          &none            &trans         &none              &trans &lt 3 N0     &none
      >;
    };

    fun_layer {
      bindings = <
        &kp K_PLAY_PAUSE  &kp K_MUTE          &none               &reset           &kp C_BRI_UP     &bt BT_SEL 2 &kp F7 &kp F8 &kp F9 &kp F12  
        &lhm LCTRL K_PREV &lhm LSHFT K_VOL_DN &lhm LMETA K_VOL_UP &lhm LALT K_NEXT &kp C_BRI_DN     &bt BT_SEL 1 &kp F4 &kp F5 &kp F6 &kp F11  
        &bt BT_PRV        &bt BT_CLR          &out OUT_TOG        &bt BT_NXT       &bootloader      &bt BT_SEL 0 &kp F1 &kp F2 &kp F3 &kp F10  
                                              &none               &none            &none            &none        &none  &none
      >;
    };

  };
};

